//#include "db.h"
#include "autoptr.h"
#include "charptr.h"
#ifdef WIN32
#include <windows.h>
#endif /*WIN32*/
#include "sql.h"
#include "triodbc.h"


///////////////////////////////////////////////////////////////////////////////
// Model - template bits only
///////////////////////////////////////////////////////////////////////////////


template<class T> List<T> *Model::internalGetProviderObjects(
	CacheByIdAndName<T> &cache, const char *fromClause,
	const char *whereClause, bool checkDomain)
{
	AutoPtr<triSQL> sql = m_odbc.GetSQL();

	int id = 0;
	char name[DB_NAME_LEN];

	sql->BindColumn(1, SQL_INTEGER, &id, sizeof(id));
	sql->BindColumn(2, SQL_CHAR, name, sizeof(name));

	// If checkDomain is set, limit the domain of the environment to those the user can see
	CharPtr domainClause;
	if(checkDomain) {
		const char *domains = m_currentUser ? m_currentUser->getAccessibleDomains() : NULL;
		if(domains) {
			domainClause = (char*) malloc(strlen(domains) + 25);
			sprintf(domainClause, " and t.domainid in (%s)", domains);
		}
	}

	int res = sql->ExecuteSQL("select t.id, t.name "
		"from %s t %s%s where t.status = 'N' %s%s%s", T::s_table(),
		(fromClause ? ", " : ""), (fromClause ? fromClause : ""),
		(whereClause ? "and " : ""), (whereClause ? whereClause : ""),
		(!domainClause.isNull() ? (const char*) domainClause : ""));
	if((res != SQL_SUCCESS) && (res != SQL_SUCCESS_WITH_INFO)) {
		return NULL;
	}

	List<T> *ret = new List<T>(false);
	List<T> newobjs(false);

	for(res = sql->FetchRow(); (res == SQL_SUCCESS) || (res == SQL_SUCCESS_WITH_INFO); res = sql->FetchRow()) {
		//printf("[%d] %d, %s\n", i, id, name);

		T *obj = NULL;
		if(!(obj = cache.get(id))) {
			obj = new T(*this, id, name);
			cache.put(obj);
			newobjs.add(obj);
		}
		ret->add(obj);
	}

	// Get the properties for each of the new provider objects
	ListIterator<T> iter(newobjs);
	for(T *t = iter.first(); t; t = iter.next()) {
		getPropertiesForProviderObject(*t);
	}

	return ret;
}


template<class T> void Model::getProviderObjectsForDomain(
	CacheByIdAndName<T> &cache, Domain *domain)
{
	char whereClause[256];
	sprintf(whereClause, "where t.domainid = %d", domain->id());

	AutoPtr<List<T> > matches = internalGetProviderObjects<T>(
		cache, NULL, whereClause, false);

	if(matches) {
		ListIterator<T> iter(*matches);
		for(T *child = iter.first(); child; child = iter.next()) {
			child->setDomain(domain);
			domain->add(child);
		}
	}
}
